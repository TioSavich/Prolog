\begin{MintedVerbatim}[commandchars=\\\{\}]
\PYG{c+cm}{/** \PYGZlt{}module\PYGZgt{} Grounded Arithmetic Operations}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * This module implements arithmetic operations without relying on Prolog\PYGZsq{}s}
\PYG{c+cm}{ * built\PYGZhy{}in arithmetic operators. All operations are grounded in embodied}
\PYG{c+cm}{ * practice and work with recollection structures that represent the history}
\PYG{c+cm}{ * of counting actions.}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * This implements the UMEDCA thesis that \PYGZdq{}Numerals are Pronouns\PYGZdq{} \PYGZhy{} numbers}
\PYG{c+cm}{ * are anaphoric recollections of the act of counting, not abstract entities.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * All operations emit cognitive cost signals to support embodied learning.}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * @author UMEDCA System}
\PYG{c+cm}{ * }
\PYG{c+cm}{ */}
\PYG{p}{:\PYGZhy{}} \PYG{n+nf}{module}\PYG{p}{(}\PYG{l+s+sAtom}{grounded\PYGZus{}arithmetic}\PYG{p}{,} \PYG{p}{[}
    \PYG{c+c1}{\PYGZpc{} Core grounded operations}
    \PYG{l+s+sAtom}{add\PYGZus{}grounded}\PYG{o}{/}\PYG{l+m+mi}{3}\PYG{p}{,}
    \PYG{l+s+sAtom}{subtract\PYGZus{}grounded}\PYG{o}{/}\PYG{l+m+mi}{3}\PYG{p}{,}
    \PYG{l+s+sAtom}{multiply\PYGZus{}grounded}\PYG{o}{/}\PYG{l+m+mi}{3}\PYG{p}{,}
    \PYG{l+s+sAtom}{divide\PYGZus{}grounded}\PYG{o}{/}\PYG{l+m+mi}{3}\PYG{p}{,}
    
    \PYG{c+c1}{\PYGZpc{} Comparison operations}
    \PYG{l+s+sAtom}{smaller\PYGZus{}than}\PYG{o}{/}\PYG{l+m+mi}{2}\PYG{p}{,}
    \PYG{l+s+sAtom}{greater\PYGZus{}than}\PYG{o}{/}\PYG{l+m+mi}{2}\PYG{p}{,}
    \PYG{l+s+sAtom}{equal\PYGZus{}to}\PYG{o}{/}\PYG{l+m+mi}{2}\PYG{p}{,}
    
    \PYG{c+c1}{\PYGZpc{} Utility predicates}
    \PYG{l+s+sAtom}{successor}\PYG{o}{/}\PYG{l+m+mi}{2}\PYG{p}{,}
    \PYG{l+s+sAtom}{predecessor}\PYG{o}{/}\PYG{l+m+mi}{2}\PYG{p}{,}
    \PYG{l+s+sAtom}{zero}\PYG{o}{/}\PYG{l+m+mi}{1}\PYG{p}{,}
    
    \PYG{c+c1}{\PYGZpc{} Conversion predicates (for interfacing with existing code during transition)}
    \PYG{l+s+sAtom}{integer\PYGZus{}to\PYGZus{}recollection}\PYG{o}{/}\PYG{l+m+mi}{2}\PYG{p}{,}
    \PYG{l+s+sAtom}{recollection\PYGZus{}to\PYGZus{}integer}\PYG{o}{/}\PYG{l+m+mi}{2}\PYG{p}{,}
    
    \PYG{c+c1}{\PYGZpc{} Cognitive cost support}
    \PYG{l+s+sAtom}{incur\PYGZus{}cost}\PYG{o}{/}\PYG{l+m+mi}{1}
\PYG{p}{]).}

\PYG{c+c1}{\PYGZpc{} \PYGZhy{}\PYGZhy{}\PYGZhy{} Core Representations \PYGZhy{}\PYGZhy{}\PYGZhy{}}

\PYG{c+c1}{\PYGZpc{}!      zero(?Recollection) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Defines the recollection structure for zero \PYGZhy{} an empty counting history.}
\PYG{n+nf}{zero}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{([])).}

\PYG{c+c1}{\PYGZpc{}!      successor(+Recollection, \PYGZhy{}NextRecollection) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Implements the successor operation by adding one more tally to the history.}
\PYG{c+c1}{\PYGZpc{}       This is the embodied act of counting one more.}
\PYG{n+nf}{successor}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{([}\PYG{l+s+sAtom}{tally}\PYG{p}{|}\PYG{n+nv}{History}\PYG{p}{]))} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{incur\PYGZus{}cost}\PYG{p}{(}\PYG{l+s+sAtom}{unit\PYGZus{}count}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      predecessor(+Recollection, \PYGZhy{}PrevRecollection) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Implements the predecessor operation by removing one tally.}
\PYG{c+c1}{\PYGZpc{}       Fails for zero (cannot count backwards from nothing).}
\PYG{n+nf}{predecessor}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{([}\PYG{l+s+sAtom}{tally}\PYG{p}{|}\PYG{n+nv}{History}\PYG{p}{]),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{))} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{incur\PYGZus{}cost}\PYG{p}{(}\PYG{l+s+sAtom}{unit\PYGZus{}count}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} \PYGZhy{}\PYGZhy{}\PYGZhy{} Comparison Operations \PYGZhy{}\PYGZhy{}\PYGZhy{}}

\PYG{c+c1}{\PYGZpc{}!      smaller\PYGZus{}than(+A, +B) is semidet.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       A is smaller than B if A\PYGZsq{}s history is a proper prefix of B\PYGZsq{}s history.}
\PYG{c+c1}{\PYGZpc{}       This captures the embodied intuition of \PYGZdq{}having counted fewer times.\PYGZdq{}}
\PYG{n+nf}{smaller\PYGZus{}than}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{HistoryA}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{HistoryB}\PYG{p}{))} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{append}\PYG{p}{(}\PYG{n+nv}{HistoryA}\PYG{p}{,} \PYG{n+nv}{Suffix}\PYG{p}{,} \PYG{n+nv}{HistoryB}\PYG{p}{),}
    \PYG{n+nv}{Suffix} \PYG{l+s+sAtom}{\PYGZbs{}=} \PYG{p}{[],}
    \PYG{n+nf}{incur\PYGZus{}cost}\PYG{p}{(}\PYG{l+s+sAtom}{inference}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      greater\PYGZus{}than(+A, +B) is semidet.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       A is greater than B if B is smaller than A.}
\PYG{n+nf}{greater\PYGZus{}than}\PYG{p}{(}\PYG{n+nv}{A}\PYG{p}{,} \PYG{n+nv}{B}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{smaller\PYGZus{}than}\PYG{p}{(}\PYG{n+nv}{B}\PYG{p}{,} \PYG{n+nv}{A}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      equal\PYGZus{}to(+A, +B) is semidet.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Two recollections are equal if they have the same counting history.}
\PYG{n+nf}{equal\PYGZus{}to}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{))} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{incur\PYGZus{}cost}\PYG{p}{(}\PYG{l+s+sAtom}{inference}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} \PYGZhy{}\PYGZhy{}\PYGZhy{} Core Arithmetic Operations \PYGZhy{}\PYGZhy{}\PYGZhy{}}

\PYG{c+c1}{\PYGZpc{}!      add\PYGZus{}grounded(+A, +B, \PYGZhy{}Sum) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Addition is the concatenation of two counting histories.}
\PYG{c+c1}{\PYGZpc{}       This represents the embodied act of \PYGZdq{}counting on\PYGZdq{} from A by B more.}
\PYG{n+nf}{add\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{HistoryA}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{HistoryB}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{HistorySum}\PYG{p}{))} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{incur\PYGZus{}cost}\PYG{p}{(}\PYG{l+s+sAtom}{inference}\PYG{p}{),}
    \PYG{n+nf}{append}\PYG{p}{(}\PYG{n+nv}{HistoryA}\PYG{p}{,} \PYG{n+nv}{HistoryB}\PYG{p}{,} \PYG{n+nv}{HistorySum}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      subtract\PYGZus{}grounded(+Minuend, +Subtrahend, \PYGZhy{}Difference) is semidet.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Subtraction removes a counting history from another.}
\PYG{c+c1}{\PYGZpc{}       Fails if trying to subtract more than is present (embodied constraint).}
\PYG{n+nf}{subtract\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{HistoryM}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{HistoryS}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{HistoryDiff}\PYG{p}{))} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{incur\PYGZus{}cost}\PYG{p}{(}\PYG{l+s+sAtom}{inference}\PYG{p}{),}
    \PYG{n+nf}{append}\PYG{p}{(}\PYG{n+nv}{HistoryDiff}\PYG{p}{,} \PYG{n+nv}{HistoryS}\PYG{p}{,} \PYG{n+nv}{HistoryM}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      multiply\PYGZus{}grounded(+A, +B, \PYGZhy{}Product) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Multiplication is repeated addition \PYGZhy{} adding A to itself B times.}
\PYG{c+c1}{\PYGZpc{}       This captures the embodied understanding of multiplication as iteration.}
\PYG{n+nf}{multiply\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{A}\PYG{p}{,} \PYG{n+nf}{recollection}\PYG{p}{([]),} \PYG{n+nv}{Zero}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{zero}\PYG{p}{(}\PYG{n+nv}{Zero}\PYG{p}{),}
    \PYG{n+nf}{incur\PYGZus{}cost}\PYG{p}{(}\PYG{l+s+sAtom}{inference}\PYG{p}{).}

\PYG{n+nf}{multiply\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{A}\PYG{p}{,} \PYG{n+nv}{B}\PYG{p}{,} \PYG{n+nv}{Product}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nv}{B} \PYG{l+s+sAtom}{\PYGZbs{}=} \PYG{n+nf}{recollection}\PYG{p}{([]),}
    \PYG{n+nf}{predecessor}\PYG{p}{(}\PYG{n+nv}{B}\PYG{p}{,} \PYG{n+nv}{BPrev}\PYG{p}{),}
    \PYG{n+nf}{multiply\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{A}\PYG{p}{,} \PYG{n+nv}{BPrev}\PYG{p}{,} \PYG{n+nv}{PartialProduct}\PYG{p}{),}
    \PYG{n+nf}{add\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{PartialProduct}\PYG{p}{,} \PYG{n+nv}{A}\PYG{p}{,} \PYG{n+nv}{Product}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      divide\PYGZus{}grounded(+Dividend, +Divisor, \PYGZhy{}Quotient) is semidet.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Division is repeated subtraction \PYGZhy{} how many times can we subtract Divisor from Dividend.}
\PYG{c+c1}{\PYGZpc{}       Fails if Divisor is zero (embodied constraint).}
\PYG{n+nf}{divide\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{Dividend}\PYG{p}{,} \PYG{n+nv}{Divisor}\PYG{p}{,} \PYG{n+nv}{Quotient}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{l+s+sAtom}{\PYGZbs{}+} \PYG{n+nf}{zero}\PYG{p}{(}\PYG{n+nv}{Divisor}\PYG{p}{),}
    \PYG{n+nf}{divide\PYGZus{}helper}\PYG{p}{(}\PYG{n+nv}{Dividend}\PYG{p}{,} \PYG{n+nv}{Divisor}\PYG{p}{,} \PYG{n+nf}{recollection}\PYG{p}{([]),} \PYG{n+nv}{Quotient}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} Helper for division by repeated subtraction}
\PYG{n+nf}{divide\PYGZus{}helper}\PYG{p}{(}\PYG{n+nv}{Remainder}\PYG{p}{,} \PYG{n+nv}{Divisor}\PYG{p}{,} \PYG{n+nv}{AccQuotient}\PYG{p}{,} \PYG{n+nv}{Quotient}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{p}{(} \PYG{n+nf}{subtract\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{Remainder}\PYG{p}{,} \PYG{n+nv}{Divisor}\PYG{p}{,} \PYG{n+nv}{NewRemainder}\PYG{p}{)} \PYG{l+s+sAtom}{\PYGZhy{}\PYGZgt{}}
        \PYG{n+nf}{successor}\PYG{p}{(}\PYG{n+nv}{AccQuotient}\PYG{p}{,} \PYG{n+nv}{NewAccQuotient}\PYG{p}{),}
        \PYG{n+nf}{divide\PYGZus{}helper}\PYG{p}{(}\PYG{n+nv}{NewRemainder}\PYG{p}{,} \PYG{n+nv}{Divisor}\PYG{p}{,} \PYG{n+nv}{NewAccQuotient}\PYG{p}{,} \PYG{n+nv}{Quotient}\PYG{p}{)}
    \PYG{p}{;}
        \PYG{n+nv}{Quotient} \PYG{o}{=} \PYG{n+nv}{AccQuotient}
    \PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} \PYGZhy{}\PYGZhy{}\PYGZhy{} Conversion Utilities (for transition period) \PYGZhy{}\PYGZhy{}\PYGZhy{}}

\PYG{c+c1}{\PYGZpc{}!      integer\PYGZus{}to\PYGZus{}recollection(+Integer, \PYGZhy{}Recollection) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Converts a Prolog integer to a recollection structure.}
\PYG{c+c1}{\PYGZpc{}       Used during the transition period to interface with existing code.}
\PYG{n+nf}{integer\PYGZus{}to\PYGZus{}recollection}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{,} \PYG{n+nf}{recollection}\PYG{p}{([]))} \PYG{p}{:\PYGZhy{}} \PYG{p}{!.}
\PYG{n+nf}{integer\PYGZus{}to\PYGZus{}recollection}\PYG{p}{(}\PYG{n+nv}{N}\PYG{p}{,} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{))} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nv}{N} \PYG{o}{\PYGZgt{}} \PYG{l+m+mi}{0}\PYG{p}{,}
    \PYG{n+nf}{length}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{N}\PYG{p}{),}
    \PYG{n+nf}{maplist}\PYG{p}{(}\PYG{l+s+sAtom}{=}\PYG{p}{(}\PYG{l+s+sAtom}{tally}\PYG{p}{),} \PYG{n+nv}{History}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      recollection\PYGZus{}to\PYGZus{}integer(+Recollection, \PYGZhy{}Integer) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Converts a recollection structure back to a Prolog integer.}
\PYG{c+c1}{\PYGZpc{}       Used during the transition period for compatibility.}
\PYG{n+nf}{recollection\PYGZus{}to\PYGZus{}integer}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{),} \PYG{n+nv}{Integer}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{length}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{Integer}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} \PYGZhy{}\PYGZhy{}\PYGZhy{} Cognitive Cost Support \PYGZhy{}\PYGZhy{}\PYGZhy{}}

\PYG{c+c1}{\PYGZpc{}!      incur\PYGZus{}cost(+Action) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Records the cognitive cost of an embodied action.}
\PYG{c+c1}{\PYGZpc{}       This will be intercepted by the meta\PYGZhy{}interpreter to track computational effort.}
\PYG{n+nf}{incur\PYGZus{}cost}\PYG{p}{(}\PYG{k}{\PYGZus{}}\PYG{n+nv}{Action}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{l+s+sAtom}{true}\PYG{p}{.}  \PYG{c+c1}{\PYGZpc{} Simple implementation \PYGZhy{} meta\PYGZhy{}interpreter will intercept this}
\end{MintedVerbatim}
