\begin{MintedVerbatim}[commandchars=\\\{\}]
\PYG{c+cm}{/** \PYGZlt{}module\PYGZgt{} Grounded Number Utilities}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * This module provides utility predicates for working with numbers in}
\PYG{c+cm}{ * grounded arithmetic without using Prolog\PYGZsq{}s built\PYGZhy{}in arithmetic operators.}
\PYG{c+cm}{ * It supports the transition from integer\PYGZhy{}based strategies to recollection\PYGZhy{}based}
\PYG{c+cm}{ * representations.}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * @author UMEDCA System}
\PYG{c+cm}{ * }
\PYG{c+cm}{ */}
\PYG{p}{:\PYGZhy{}} \PYG{n+nf}{module}\PYG{p}{(}\PYG{l+s+sAtom}{grounded\PYGZus{}utils}\PYG{p}{,} \PYG{p}{[}
    \PYG{c+c1}{\PYGZpc{} Decomposition operations (for base\PYGZhy{}10 strategies)}
    \PYG{l+s+sAtom}{decompose\PYGZus{}base10}\PYG{o}{/}\PYG{l+m+mi}{3}\PYG{p}{,}
    \PYG{l+s+sAtom}{decompose\PYGZus{}to\PYGZus{}peano}\PYG{o}{/}\PYG{l+m+mi}{3}\PYG{p}{,}
    \PYG{l+s+sAtom}{base\PYGZus{}decompose\PYGZus{}grounded}\PYG{o}{/}\PYG{l+m+mi}{4}\PYG{p}{,}
    \PYG{l+s+sAtom}{base\PYGZus{}recompose\PYGZus{}grounded}\PYG{o}{/}\PYG{l+m+mi}{4}\PYG{p}{,}
    
    \PYG{c+c1}{\PYGZpc{} Embodied operations}
    \PYG{l+s+sAtom}{count\PYGZus{}down\PYGZus{}by}\PYG{o}{/}\PYG{l+m+mi}{3}\PYG{p}{,}
    \PYG{l+s+sAtom}{count\PYGZus{}up\PYGZus{}by}\PYG{o}{/}\PYG{l+m+mi}{3}\PYG{p}{,}
    
    \PYG{c+c1}{\PYGZpc{} Grounded comparisons}
    \PYG{l+s+sAtom}{is\PYGZus{}zero\PYGZus{}grounded}\PYG{o}{/}\PYG{l+m+mi}{1}\PYG{p}{,}
    \PYG{l+s+sAtom}{is\PYGZus{}positive\PYGZus{}grounded}\PYG{o}{/}\PYG{l+m+mi}{1}\PYG{p}{,}
    
    \PYG{c+c1}{\PYGZpc{} Peano utilities}
    \PYG{l+s+sAtom}{peano\PYGZus{}to\PYGZus{}recollection}\PYG{o}{/}\PYG{l+m+mi}{2}\PYG{p}{,}
    \PYG{l+s+sAtom}{recollection\PYGZus{}to\PYGZus{}peano}\PYG{o}{/}\PYG{l+m+mi}{2}
\PYG{p}{]).}

\PYG{p}{:\PYGZhy{}} \PYG{n+nf}{use\PYGZus{}module}\PYG{p}{(}\PYG{l+s+sAtom}{grounded\PYGZus{}arithmetic}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} \PYGZhy{}\PYGZhy{}\PYGZhy{} Base\PYGZhy{}10 Decomposition \PYGZhy{}\PYGZhy{}\PYGZhy{}}

\PYG{c+c1}{\PYGZpc{}!      decompose\PYGZus{}base10(+Number, \PYGZhy{}Bases, \PYGZhy{}Ones) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Decomposes a recollection into base\PYGZhy{}10 components without using arithmetic.}
\PYG{c+c1}{\PYGZpc{}       This is done by grouping tallies into groups of 10.}
\PYG{n+nf}{decompose\PYGZus{}base10}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{Bases}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{Ones}\PYG{p}{))} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{incur\PYGZus{}cost}\PYG{p}{(}\PYG{l+s+sAtom}{inference}\PYG{p}{),}
    \PYG{n+nf}{group\PYGZus{}by\PYGZus{}tens}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{BasesHistory}\PYG{p}{,} \PYG{n+nv}{OnesHistory}\PYG{p}{),}
    \PYG{n+nv}{Bases} \PYG{o}{=} \PYG{n+nv}{BasesHistory}\PYG{p}{,}
    \PYG{n+nv}{Ones} \PYG{o}{=} \PYG{n+nv}{OnesHistory}\PYG{p}{.}

\PYG{c+c1}{\PYGZpc{} Helper to group tallies into tens}
\PYG{n+nf}{group\PYGZus{}by\PYGZus{}tens}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{Bases}\PYG{p}{,} \PYG{n+nv}{Ones}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{group\PYGZus{}by\PYGZus{}tens\PYGZus{}helper}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{p}{[],} \PYG{n+nv}{Bases}\PYG{p}{,} \PYG{n+nv}{Ones}\PYG{p}{).}

\PYG{n+nf}{group\PYGZus{}by\PYGZus{}tens\PYGZus{}helper}\PYG{p}{([],} \PYG{n+nv}{Acc}\PYG{p}{,} \PYG{n+nv}{Acc}\PYG{p}{,} \PYG{p}{[]).}
\PYG{n+nf}{group\PYGZus{}by\PYGZus{}tens\PYGZus{}helper}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{Acc}\PYG{p}{,} \PYG{n+nv}{Bases}\PYG{p}{,} \PYG{n+nv}{Ones}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{p}{(} \PYG{n+nf}{take\PYGZus{}ten}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{Ten}\PYG{p}{,} \PYG{n+nv}{Rest}\PYG{p}{)} \PYG{l+s+sAtom}{\PYGZhy{}\PYGZgt{}}
        \PYG{n+nf}{group\PYGZus{}by\PYGZus{}tens\PYGZus{}helper}\PYG{p}{(}\PYG{n+nv}{Rest}\PYG{p}{,} \PYG{p}{[}\PYG{n+nv}{Ten}\PYG{p}{|}\PYG{n+nv}{Acc}\PYG{p}{],} \PYG{n+nv}{Bases}\PYG{p}{,} \PYG{n+nv}{Ones}\PYG{p}{)}
    \PYG{p}{;}
        \PYG{n+nv}{Ones} \PYG{o}{=} \PYG{n+nv}{History}\PYG{p}{,}
        \PYG{n+nv}{Bases} \PYG{o}{=} \PYG{n+nv}{Acc}
    \PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} Take exactly 10 tallies if available}
\PYG{n+nf}{take\PYGZus{}ten}\PYG{p}{([}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{|}\PYG{n+nv}{Rest}\PYG{p}{],} 
         \PYG{p}{[}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{,}\PYG{l+s+sAtom}{tally}\PYG{p}{],} \PYG{n+nv}{Rest}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      base\PYGZus{}decompose\PYGZus{}grounded(+Number, +Base, \PYGZhy{}BasesPart, \PYGZhy{}Remainder) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Decomposes a number into base components without using arithmetic division.}
\PYG{c+c1}{\PYGZpc{}       For base\PYGZhy{}10, this separates tens from ones using grounded operations.}
\PYG{n+nf}{base\PYGZus{}decompose\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{BaseHistory}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{BasesHistory}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{RemainderHistory}\PYG{p}{))} \PYG{p}{:\PYGZhy{}}
    \PYG{c+c1}{\PYGZpc{} Count how many complete base groups are in the number}
    \PYG{n+nf}{count\PYGZus{}base\PYGZus{}groups\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{p}{[],} \PYG{n+nv}{BaseCount}\PYG{p}{),}
    \PYG{n+nv}{BasesHistory} \PYG{o}{=} \PYG{n+nv}{BaseCount}\PYG{p}{,}
    
    \PYG{c+c1}{\PYGZpc{} Calculate remainder by subtracting all complete base groups}
    \PYG{n+nf}{multiply\PYGZus{}base\PYGZus{}by\PYGZus{}count\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{BaseCount}\PYG{p}{,} \PYG{n+nv}{TotalBasesHistory}\PYG{p}{),}
    \PYG{n+nf}{subtract\PYGZus{}histories\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{TotalBasesHistory}\PYG{p}{,} \PYG{n+nv}{RemainderHistory}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} Helper to count how many complete base groups fit in the history (grounded version)}
\PYG{n+nf}{count\PYGZus{}base\PYGZus{}groups\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{Acc}\PYG{p}{,} \PYG{n+nv}{Count}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{p}{(} \PYG{n+nf}{can\PYGZus{}subtract\PYGZus{}base\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{Rest}\PYG{p}{)} \PYG{l+s+sAtom}{\PYGZhy{}\PYGZgt{}}
        \PYG{n+nf}{append}\PYG{p}{(}\PYG{n+nv}{Acc}\PYG{p}{,} \PYG{p}{[}\PYG{l+s+sAtom}{tally}\PYG{p}{],} \PYG{n+nv}{NewAcc}\PYG{p}{),}
        \PYG{n+nf}{count\PYGZus{}base\PYGZus{}groups\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{Rest}\PYG{p}{,} \PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{NewAcc}\PYG{p}{,} \PYG{n+nv}{Count}\PYG{p}{)}
    \PYG{p}{;}
        \PYG{n+nv}{Count} \PYG{o}{=} \PYG{n+nv}{Acc}
    \PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} Check if we can subtract a base group from the history (grounded version)}
\PYG{n+nf}{can\PYGZus{}subtract\PYGZus{}base\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{Rest}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{append}\PYG{p}{(}\PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{Rest}\PYG{p}{,} \PYG{n+nv}{History}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} Multiply base by count to get total bases (grounded version)}
\PYG{n+nf}{multiply\PYGZus{}base\PYGZus{}by\PYGZus{}count\PYGZus{}grounded}\PYG{p}{(}\PYG{k}{\PYGZus{}}\PYG{p}{,} \PYG{p}{[],} \PYG{p}{[]).}
\PYG{n+nf}{multiply\PYGZus{}base\PYGZus{}by\PYGZus{}count\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{p}{[}\PYG{k}{\PYGZus{}}\PYG{p}{|}\PYG{n+nv}{CountRest}\PYG{p}{],} \PYG{n+nv}{Result}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{multiply\PYGZus{}base\PYGZus{}by\PYGZus{}count\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{CountRest}\PYG{p}{,} \PYG{n+nv}{Rest}\PYG{p}{),}
    \PYG{n+nf}{append}\PYG{p}{(}\PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{Rest}\PYG{p}{,} \PYG{n+nv}{Result}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} Subtract one history from another (grounded version)}
\PYG{n+nf}{subtract\PYGZus{}histories\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{History1}\PYG{p}{,} \PYG{n+nv}{History2}\PYG{p}{,} \PYG{n+nv}{Result}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{append}\PYG{p}{(}\PYG{n+nv}{History2}\PYG{p}{,} \PYG{n+nv}{Result}\PYG{p}{,} \PYG{n+nv}{History1}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      base\PYGZus{}recompose\PYGZus{}grounded(+BasesPart, +Remainder, +Base, \PYGZhy{}Result) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Recomposes a number from base components without using arithmetic multiplication.}
\PYG{n+nf}{base\PYGZus{}recompose\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{BasesHistory}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{RemainderHistory}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{BaseHistory}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{ResultHistory}\PYG{p}{))} \PYG{p}{:\PYGZhy{}}
    \PYG{c+c1}{\PYGZpc{} Multiply bases by base value}
    \PYG{n+nf}{multiply\PYGZus{}histories}\PYG{p}{(}\PYG{n+nv}{BasesHistory}\PYG{p}{,} \PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{BasesValueHistory}\PYG{p}{),}
    \PYG{c+c1}{\PYGZpc{} Add remainder}
    \PYG{n+nf}{append}\PYG{p}{(}\PYG{n+nv}{BasesValueHistory}\PYG{p}{,} \PYG{n+nv}{RemainderHistory}\PYG{p}{,} \PYG{n+nv}{ResultHistory}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} Multiply two histories (repeated addition)}
\PYG{n+nf}{multiply\PYGZus{}histories}\PYG{p}{([],} \PYG{k}{\PYGZus{}}\PYG{p}{,} \PYG{p}{[]).}
\PYG{n+nf}{multiply\PYGZus{}histories}\PYG{p}{([}\PYG{k}{\PYGZus{}}\PYG{p}{|}\PYG{n+nv}{Rest}\PYG{p}{],} \PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{Result}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{multiply\PYGZus{}histories}\PYG{p}{(}\PYG{n+nv}{Rest}\PYG{p}{,} \PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{RestResult}\PYG{p}{),}
    \PYG{n+nf}{append}\PYG{p}{(}\PYG{n+nv}{BaseHistory}\PYG{p}{,} \PYG{n+nv}{RestResult}\PYG{p}{,} \PYG{n+nv}{Result}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      decompose\PYGZus{}to\PYGZus{}peano(+Number, \PYGZhy{}Bases, \PYGZhy{}Ones) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Decomposes a Peano number into base\PYGZhy{}10 components.}
\PYG{c+c1}{\PYGZpc{}       Converts to recollection, decomposes, then back to Peano.}
\PYG{n+nf}{decompose\PYGZus{}to\PYGZus{}peano}\PYG{p}{(}\PYG{n+nv}{PeanoNum}\PYG{p}{,} \PYG{n+nv}{PeanoBases}\PYG{p}{,} \PYG{n+nv}{PeanoOnes}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{peano\PYGZus{}to\PYGZus{}recollection}\PYG{p}{(}\PYG{n+nv}{PeanoNum}\PYG{p}{,} \PYG{n+nv}{Recollection}\PYG{p}{),}
    \PYG{n+nf}{decompose\PYGZus{}base10}\PYG{p}{(}\PYG{n+nv}{Recollection}\PYG{p}{,} \PYG{n+nv}{RecollectionBases}\PYG{p}{,} \PYG{n+nv}{RecollectionOnes}\PYG{p}{),}
    \PYG{n+nf}{recollection\PYGZus{}to\PYGZus{}peano}\PYG{p}{(}\PYG{n+nv}{RecollectionBases}\PYG{p}{,} \PYG{n+nv}{PeanoBases}\PYG{p}{),}
    \PYG{n+nf}{recollection\PYGZus{}to\PYGZus{}peano}\PYG{p}{(}\PYG{n+nv}{RecollectionOnes}\PYG{p}{,} \PYG{n+nv}{PeanoOnes}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} \PYGZhy{}\PYGZhy{}\PYGZhy{} Grounded Operations \PYGZhy{}\PYGZhy{}\PYGZhy{}}

\PYG{c+c1}{\PYGZpc{}!      count\PYGZus{}down\PYGZus{}by(+Start, +Amount, \PYGZhy{}Result) is semidet.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Counts down from Start by Amount without using arithmetic.}
\PYG{n+nf}{count\PYGZus{}down\PYGZus{}by}\PYG{p}{(}\PYG{n+nv}{Start}\PYG{p}{,} \PYG{n+nv}{Amount}\PYG{p}{,} \PYG{n+nv}{Result}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{l+s+sAtom}{grounded\PYGZus{}arithmetic:}\PYG{n+nf}{subtract\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{Start}\PYG{p}{,} \PYG{n+nv}{Amount}\PYG{p}{,} \PYG{n+nv}{Result}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      count\PYGZus{}up\PYGZus{}by(+Start, +Amount, \PYGZhy{}Result) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Counts up from Start by Amount without using arithmetic.}
\PYG{n+nf}{count\PYGZus{}up\PYGZus{}by}\PYG{p}{(}\PYG{n+nv}{Start}\PYG{p}{,} \PYG{n+nv}{Amount}\PYG{p}{,} \PYG{n+nv}{Result}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{l+s+sAtom}{grounded\PYGZus{}arithmetic:}\PYG{n+nf}{add\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nv}{Start}\PYG{p}{,} \PYG{n+nv}{Amount}\PYG{p}{,} \PYG{n+nv}{Result}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{}!      is\PYGZus{}zero\PYGZus{}grounded(+Number) is semidet.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Tests if a number is zero without using arithmetic comparison.}
\PYG{n+nf}{is\PYGZus{}zero\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{([])).}
\PYG{n+nf}{is\PYGZus{}zero\PYGZus{}grounded}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{).}  \PYG{c+c1}{\PYGZpc{} Peano zero}

\PYG{c+c1}{\PYGZpc{}!      is\PYGZus{}positive\PYGZus{}grounded(+Number) is semidet.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Tests if a number is positive without using arithmetic comparison.}
\PYG{n+nf}{is\PYGZus{}positive\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{([}\PYG{k}{\PYGZus{}}\PYG{p}{|}\PYG{k}{\PYGZus{}}\PYG{p}{])).}
\PYG{n+nf}{is\PYGZus{}positive\PYGZus{}grounded}\PYG{p}{(}\PYG{n+nf}{s}\PYG{p}{(}\PYG{k}{\PYGZus{}}\PYG{p}{)).}  \PYG{c+c1}{\PYGZpc{} Peano successor}

\PYG{c+c1}{\PYGZpc{} \PYGZhy{}\PYGZhy{}\PYGZhy{} Peano\PYGZhy{}Recollection Conversion \PYGZhy{}\PYGZhy{}\PYGZhy{}}

\PYG{c+c1}{\PYGZpc{}!      peano\PYGZus{}to\PYGZus{}recollection(+Peano, \PYGZhy{}Recollection) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Converts Peano representation to recollection structure.}
\PYG{n+nf}{peano\PYGZus{}to\PYGZus{}recollection}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{,} \PYG{n+nf}{recollection}\PYG{p}{([])).}
\PYG{n+nf}{peano\PYGZus{}to\PYGZus{}recollection}\PYG{p}{(}\PYG{n+nf}{s}\PYG{p}{(}\PYG{n+nv}{N}\PYG{p}{),} \PYG{n+nf}{recollection}\PYG{p}{([}\PYG{l+s+sAtom}{tally}\PYG{p}{|}\PYG{n+nv}{History}\PYG{p}{]))} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{peano\PYGZus{}to\PYGZus{}recollection}\PYG{p}{(}\PYG{n+nv}{N}\PYG{p}{,} \PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{)).}

\PYG{c+c1}{\PYGZpc{}!      recollection\PYGZus{}to\PYGZus{}peano(+Recollection, \PYGZhy{}Peano) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Converts recollection structure to Peano representation.}
\PYG{n+nf}{recollection\PYGZus{}to\PYGZus{}peano}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{([]),} \PYG{l+m+mi}{0}\PYG{p}{).}
\PYG{n+nf}{recollection\PYGZus{}to\PYGZus{}peano}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{([}\PYG{l+s+sAtom}{tally}\PYG{p}{|}\PYG{n+nv}{History}\PYG{p}{]),} \PYG{n+nf}{s}\PYG{p}{(}\PYG{n+nv}{N}\PYG{p}{))} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{recollection\PYGZus{}to\PYGZus{}peano}\PYG{p}{(}\PYG{n+nf}{recollection}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{),} \PYG{n+nv}{N}\PYG{p}{).}
\end{MintedVerbatim}
