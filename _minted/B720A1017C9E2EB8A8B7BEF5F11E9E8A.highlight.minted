\begin{MintedVerbatim}[commandchars=\\\{\}]
\PYG{c+cm}{/** \PYGZlt{}module\PYGZgt{} Student Division Strategy: Dealing by Ones}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * This module implements a basic \PYGZdq{}dealing\PYGZdq{} or \PYGZdq{}sharing one by one\PYGZdq{} strategy}
\PYG{c+cm}{ * for division (T / N), modeled as a finite state machine. It simulates}
\PYG{c+cm}{ * distributing a total number of items (T) one at a time into a number of}
\PYG{c+cm}{ * groups (N) until the items run out.}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * The process is as follows:}
\PYG{c+cm}{ * 1. Initialize N empty groups.}
\PYG{c+cm}{ * 2. Deal one item from the total T to the first group.}
\PYG{c+cm}{ * 3. Deal one item to the second group, and so on, cycling through the groups.}
\PYG{c+cm}{ * 4. Continue until all T items have been dealt.}
\PYG{c+cm}{ * 5. The quotient is the number of items in any one group (assuming fair sharing,}
\PYG{c+cm}{ *    i.e., the remainder is 0). This model does not explicitly calculate a remainder.}
\PYG{c+cm}{ * 6. The strategy fails if the number of groups (N) is not positive.}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * The state is represented by the term:}
\PYG{c+cm}{ * `state(Name, RemainingItems, Groups, CurrentGroupIndex)`}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * The history of execution is captured as a list of steps:}
\PYG{c+cm}{ * `step(Name, RemainingItems, Groups, Interpretation)`}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * @author Tilo Wiedera}
\PYG{c+cm}{ * @license MIT}
\PYG{c+cm}{ */}
\PYG{p}{:\PYGZhy{}} \PYG{n+nf}{module}\PYG{p}{(}\PYG{l+s+sAtom}{smr\PYGZus{}div\PYGZus{}dealing\PYGZus{}by\PYGZus{}ones}\PYG{p}{,}
          \PYG{p}{[} \PYG{l+s+sAtom}{run\PYGZus{}dealing\PYGZus{}by\PYGZus{}ones}\PYG{o}{/}\PYG{l+m+mi}{4}
          \PYG{p}{]).}

\PYG{p}{:\PYGZhy{}} \PYG{n+nf}{use\PYGZus{}module}\PYG{p}{(}\PYG{n+nf}{library}\PYG{p}{(}\PYG{l+s+sAtom}{lists}\PYG{p}{)).}

\PYG{c+c1}{\PYGZpc{}!      run\PYGZus{}dealing\PYGZus{}by\PYGZus{}ones(+T:integer, +N:integer, \PYGZhy{}FinalQuotient:integer, \PYGZhy{}History:list) is det.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       Executes the \PYGZsq{}Dealing by Ones\PYGZsq{} division strategy for T / N.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       This predicate initializes and runs a state machine that models the}
\PYG{c+c1}{\PYGZpc{}       process of dealing `T` items one by one into `N` groups. It first}
\PYG{c+c1}{\PYGZpc{}       checks for a positive number of groups `N`. If valid, it simulates}
\PYG{c+c1}{\PYGZpc{}       the dealing process and traces the execution. The quotient is the}
\PYG{c+c1}{\PYGZpc{}       final number of items in one of the groups.}
\PYG{c+c1}{\PYGZpc{}}
\PYG{c+c1}{\PYGZpc{}       @param T The Dividend (Total number of items to deal).}
\PYG{c+c1}{\PYGZpc{}       @param N The Divisor (Number of groups to deal into).}
\PYG{c+c1}{\PYGZpc{}       @param FinalQuotient The result of the division (items per group).}
\PYG{c+c1}{\PYGZpc{}       If N is not positive, this will be the atom `\PYGZsq{}error\PYGZsq{}`.}
\PYG{c+c1}{\PYGZpc{}       @param History A list of `step/4` terms that describe the state}
\PYG{c+c1}{\PYGZpc{}       machine\PYGZsq{}s execution path and the interpretation of each step.}

\PYG{n+nf}{run\PYGZus{}dealing\PYGZus{}by\PYGZus{}ones}\PYG{p}{(}\PYG{n+nv}{T}\PYG{p}{,} \PYG{n+nv}{N}\PYG{p}{,} \PYG{n+nv}{FinalQuotient}\PYG{p}{,} \PYG{n+nv}{History}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{p}{(}\PYG{n+nv}{N} \PYG{o}{=\PYGZlt{}} \PYG{l+m+mi}{0}\PYG{p}{,} \PYG{n+nv}{T} \PYG{o}{\PYGZgt{}} \PYG{l+m+mi}{0} \PYG{l+s+sAtom}{\PYGZhy{}\PYGZgt{}}
        \PYG{n+nv}{History} \PYG{o}{=} \PYG{p}{[}\PYG{n+nf}{step}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}error}\PYG{p}{,} \PYG{n+nv}{T}\PYG{p}{,} \PYG{p}{[],} \PYG{l+s+sAtom}{\PYGZsq{}Error: Cannot divide by N.\PYGZsq{}}\PYG{p}{)],}
        \PYG{n+nv}{FinalQuotient} \PYG{o}{=} \PYG{l+s+sAtom}{\PYGZsq{}error\PYGZsq{}}
    \PYG{p}{;}
        \PYG{c+c1}{\PYGZpc{} Create a list of N zeros to represent the groups.}
        \PYG{n+nf}{length}\PYG{p}{(}\PYG{n+nv}{Groups}\PYG{p}{,} \PYG{n+nv}{N}\PYG{p}{),}
        \PYG{n+nf}{maplist}\PYG{p}{(}\PYG{l+s+sAtom}{=}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{),} \PYG{n+nv}{Groups}\PYG{p}{),}
        \PYG{n+nv}{InitialState} \PYG{o}{=} \PYG{n+nf}{state}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}init}\PYG{p}{,} \PYG{n+nv}{T}\PYG{p}{,} \PYG{n+nv}{Groups}\PYG{p}{,} \PYG{l+m+mi}{0}\PYG{p}{),}

        \PYG{n+nf}{run}\PYG{p}{(}\PYG{n+nv}{InitialState}\PYG{p}{,} \PYG{n+nv}{N}\PYG{p}{,} \PYG{p}{[],} \PYG{n+nv}{ReversedHistory}\PYG{p}{),}
        \PYG{n+nf}{reverse}\PYG{p}{(}\PYG{n+nv}{ReversedHistory}\PYG{p}{,} \PYG{n+nv}{History}\PYG{p}{),}

        \PYG{p}{(}\PYG{n+nf}{last}\PYG{p}{(}\PYG{n+nv}{History}\PYG{p}{,} \PYG{n+nf}{step}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}accept}\PYG{p}{,} \PYG{k}{\PYGZus{}}\PYG{p}{,} \PYG{n+nv}{FinalGroups}\PYG{p}{,} \PYG{k}{\PYGZus{}}\PYG{p}{)),} \PYG{n+nf}{nth0}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{,} \PYG{n+nv}{FinalGroups}\PYG{p}{,} \PYG{n+nv}{FinalQuotient}\PYG{p}{)} \PYG{l+s+sAtom}{\PYGZhy{}\PYGZgt{}} \PYG{l+s+sAtom}{true} \PYG{p}{;} \PYG{n+nv}{FinalQuotient} \PYG{o}{=} \PYG{l+s+sAtom}{\PYGZsq{}error\PYGZsq{}}\PYG{p}{)}
    \PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} run/4 is the main recursive loop of the state machine.}
\PYG{n+nf}{run}\PYG{p}{(}\PYG{n+nf}{state}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}accept}\PYG{p}{,} \PYG{l+m+mi}{0}\PYG{p}{,} \PYG{n+nv}{Groups}\PYG{p}{,} \PYG{k}{\PYGZus{}}\PYG{p}{),} \PYG{k}{\PYGZus{}}\PYG{p}{,} \PYG{n+nv}{Acc}\PYG{p}{,} \PYG{n+nv}{FinalHistory}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{p}{(}\PYG{n+nf}{nth0}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{,} \PYG{n+nv}{Groups}\PYG{p}{,} \PYG{n+nv}{R}\PYG{p}{)} \PYG{l+s+sAtom}{\PYGZhy{}\PYGZgt{}} \PYG{n+nv}{Result} \PYG{o}{=} \PYG{n+nv}{R} \PYG{p}{;} \PYG{n+nv}{Result} \PYG{o}{=} \PYG{l+m+mi}{0}\PYG{p}{),}
    \PYG{n+nf}{format}\PYG{p}{(}\PYG{n+nf}{string}\PYG{p}{(}\PYG{n+nv}{Interpretation}\PYG{p}{),} \PYG{l+s+sAtom}{\PYGZsq{}Dealing complete. Result: \PYGZti{}w per group.\PYGZsq{}}\PYG{p}{,} \PYG{p}{[}\PYG{n+nv}{Result}\PYG{p}{]),}
    \PYG{n+nv}{HistoryEntry} \PYG{o}{=} \PYG{n+nf}{step}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}accept}\PYG{p}{,} \PYG{l+m+mi}{0}\PYG{p}{,} \PYG{n+nv}{Groups}\PYG{p}{,} \PYG{n+nv}{Interpretation}\PYG{p}{),}
    \PYG{n+nv}{FinalHistory} \PYG{o}{=} \PYG{p}{[}\PYG{n+nv}{HistoryEntry} \PYG{p}{|} \PYG{n+nv}{Acc}\PYG{p}{].}

\PYG{n+nf}{run}\PYG{p}{(}\PYG{n+nv}{CurrentState}\PYG{p}{,} \PYG{n+nv}{N}\PYG{p}{,} \PYG{n+nv}{Acc}\PYG{p}{,} \PYG{n+nv}{FinalHistory}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{transition}\PYG{p}{(}\PYG{n+nv}{CurrentState}\PYG{p}{,} \PYG{n+nv}{N}\PYG{p}{,} \PYG{n+nv}{NextState}\PYG{p}{,} \PYG{n+nv}{Interpretation}\PYG{p}{),}
    \PYG{n+nv}{CurrentState} \PYG{o}{=} \PYG{n+nf}{state}\PYG{p}{(}\PYG{n+nv}{Name}\PYG{p}{,} \PYG{n+nv}{Rem}\PYG{p}{,} \PYG{n+nv}{Gs}\PYG{p}{,} \PYG{k}{\PYGZus{}}\PYG{p}{),}
    \PYG{n+nv}{HistoryEntry} \PYG{o}{=} \PYG{n+nf}{step}\PYG{p}{(}\PYG{n+nv}{Name}\PYG{p}{,} \PYG{n+nv}{Rem}\PYG{p}{,} \PYG{n+nv}{Gs}\PYG{p}{,} \PYG{n+nv}{Interpretation}\PYG{p}{),}
    \PYG{n+nf}{run}\PYG{p}{(}\PYG{n+nv}{NextState}\PYG{p}{,} \PYG{n+nv}{N}\PYG{p}{,} \PYG{p}{[}\PYG{n+nv}{HistoryEntry} \PYG{p}{|} \PYG{n+nv}{Acc}\PYG{p}{],} \PYG{n+nv}{FinalHistory}\PYG{p}{).}

\PYG{c+c1}{\PYGZpc{} transition/4 defines the logic for moving from one state to the next.}

\PYG{c+c1}{\PYGZpc{} From q\PYGZus{}init, proceed to the main dealing loop.}
\PYG{n+nf}{transition}\PYG{p}{(}\PYG{n+nf}{state}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}init}\PYG{p}{,} \PYG{n+nv}{T}\PYG{p}{,} \PYG{n+nv}{Gs}\PYG{p}{,} \PYG{n+nv}{Idx}\PYG{p}{),} \PYG{k}{\PYGZus{}}\PYG{p}{,} \PYG{n+nf}{state}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}loop\PYGZus{}deal}\PYG{p}{,} \PYG{n+nv}{T}\PYG{p}{,} \PYG{n+nv}{Gs}\PYG{p}{,} \PYG{n+nv}{Idx}\PYG{p}{),} \PYG{n+nv}{Interp}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nf}{length}\PYG{p}{(}\PYG{n+nv}{Gs}\PYG{p}{,} \PYG{n+nv}{N}\PYG{p}{),}
    \PYG{n+nf}{format}\PYG{p}{(}\PYG{n+nf}{string}\PYG{p}{(}\PYG{n+nv}{Interp}\PYG{p}{),} \PYG{l+s+sAtom}{\PYGZsq{}Initialize: \PYGZti{}w items to deal into \PYGZti{}w groups.\PYGZsq{}}\PYG{p}{,} \PYG{p}{[}\PYG{n+nv}{T}\PYG{p}{,} \PYG{n+nv}{N}\PYG{p}{]).}

\PYG{c+c1}{\PYGZpc{} In q\PYGZus{}loop\PYGZus{}deal, deal one item to the current group and cycle to the next.}
\PYG{n+nf}{transition}\PYG{p}{(}\PYG{n+nf}{state}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}loop\PYGZus{}deal}\PYG{p}{,} \PYG{n+nv}{Rem}\PYG{p}{,} \PYG{n+nv}{Gs}\PYG{p}{,} \PYG{n+nv}{Idx}\PYG{p}{),} \PYG{n+nv}{N}\PYG{p}{,} \PYG{n+nf}{state}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}loop\PYGZus{}deal}\PYG{p}{,} \PYG{n+nv}{NewRem}\PYG{p}{,} \PYG{n+nv}{NewGs}\PYG{p}{,} \PYG{n+nv}{NewIdx}\PYG{p}{),} \PYG{n+nv}{Interp}\PYG{p}{)} \PYG{p}{:\PYGZhy{}}
    \PYG{n+nv}{Rem} \PYG{o}{\PYGZgt{}} \PYG{l+m+mi}{0}\PYG{p}{,}
    \PYG{n+nv}{NewRem} \PYG{o}{is} \PYG{n+nv}{Rem} \PYG{o}{\PYGZhy{}} \PYG{l+m+mi}{1}\PYG{p}{,}
    \PYG{c+c1}{\PYGZpc{} Increment value in the list at the current group index.}
    \PYG{n+nf}{nth0}\PYG{p}{(}\PYG{n+nv}{Idx}\PYG{p}{,} \PYG{n+nv}{Gs}\PYG{p}{,} \PYG{n+nv}{OldVal}\PYG{p}{,} \PYG{n+nv}{Rest}\PYG{p}{),}
    \PYG{n+nv}{NewVal} \PYG{o}{is} \PYG{n+nv}{OldVal} \PYG{o}{+} \PYG{l+m+mi}{1}\PYG{p}{,}
    \PYG{n+nf}{nth0}\PYG{p}{(}\PYG{n+nv}{Idx}\PYG{p}{,} \PYG{n+nv}{NewGs}\PYG{p}{,} \PYG{n+nv}{NewVal}\PYG{p}{,} \PYG{n+nv}{Rest}\PYG{p}{),}
    \PYG{n+nv}{NewIdx} \PYG{o}{is} \PYG{p}{(}\PYG{n+nv}{Idx} \PYG{o}{+} \PYG{l+m+mi}{1}\PYG{p}{)} \PYG{o}{mod} \PYG{n+nv}{N}\PYG{p}{,}
    \PYG{n+nf}{format}\PYG{p}{(}\PYG{n+nf}{string}\PYG{p}{(}\PYG{n+nv}{Interp}\PYG{p}{),} \PYG{l+s+sAtom}{\PYGZsq{}Dealt 1 item to Group \PYGZti{}w.\PYGZsq{}}\PYG{p}{,} \PYG{p}{[}\PYG{n+nv}{Idx}\PYG{o}{+}\PYG{l+m+mi}{1}\PYG{p}{]).}
\PYG{c+c1}{\PYGZpc{} If no items remain, transition to the accept state.}
\PYG{n+nf}{transition}\PYG{p}{(}\PYG{n+nf}{state}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}loop\PYGZus{}deal}\PYG{p}{,} \PYG{l+m+mi}{0}\PYG{p}{,} \PYG{n+nv}{Gs}\PYG{p}{,} \PYG{n+nv}{Idx}\PYG{p}{),} \PYG{k}{\PYGZus{}}\PYG{p}{,} \PYG{n+nf}{state}\PYG{p}{(}\PYG{l+s+sAtom}{q\PYGZus{}accept}\PYG{p}{,} \PYG{l+m+mi}{0}\PYG{p}{,} \PYG{n+nv}{Gs}\PYG{p}{,} \PYG{n+nv}{Idx}\PYG{p}{),} \PYG{l+s+sAtom}{\PYGZsq{}Dealing complete.\PYGZsq{}}\PYG{p}{).}
\end{MintedVerbatim}
